name: Build and push Docker image

on:
  push:
    tags:
      - "v*"
  workflow_dispatch:

jobs:
  get-latest-tag:
    runs-on: ubuntu-latest
    outputs:
      tag: ${{ steps.get-tag.outputs.tag }}
      previous_tag: ${{ steps.get-previous-tag.outputs.tag }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - id: get-tag
        run: |
          if [ "${{ github.event_name }}" = "push" ]; then
            # 如果是push触发，使用触发的tag
            echo "tag=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          else
            # 如果是手动触发，获取分支上最新的tag
            LATEST_TAG=$(git describe --tags --abbrev=0)
            echo "tag=$LATEST_TAG" >> $GITHUB_OUTPUT
          fi
      - id: get-previous-tag
        run: |
          CURRENT_TAG=${{ steps.get-tag.outputs.tag }}
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 "${CURRENT_TAG}^" || echo '')
          echo "tag=$PREVIOUS_TAG" >> $GITHUB_OUTPUT

  release-docker:
    name: Build and push Docker image
    runs-on: ubuntu-latest
    needs: [get-latest-tag]
    environment: Production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: network=host

      - name: Log into GHCR
        uses: docker/login-action@master
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ github.token }}

      - name: Login to Docker Hub
        uses: docker/login-action@master
        with:
          username: ${{ secrets.DOCKERHUB_USER }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set up image name
        run: |
          GHCR_IMAGE_NAME=$(echo "ghcr.io/${{ github.repository_owner }}/nezha-dash" | tr '[:upper:]' '[:lower:]')
          echo "GHCR_IMAGE_NAME=$GHCR_IMAGE_NAME" >> $GITHUB_OUTPUT
          DOCKERHUB_IMAGE_NAME="${{ secrets.DOCKERHUB_USER }}/nezha-dash"
          echo "DOCKERHUB_IMAGE_NAME=$DOCKERHUB_IMAGE_NAME" >> $GITHUB_OUTPUT
        id: image-name

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            ${{ steps.image-name.outputs.GHCR_IMAGE_NAME }}:latest
            ${{ steps.image-name.outputs.GHCR_IMAGE_NAME }}:${{ needs.get-latest-tag.outputs.tag }}
            ${{ steps.image-name.outputs.DOCKERHUB_IMAGE_NAME }}:latest
            ${{ steps.image-name.outputs.DOCKERHUB_IMAGE_NAME }}:${{ needs.get-latest-tag.outputs.tag }}

  release:
    runs-on: ubuntu-latest
    needs: [get-latest-tag]
    name: Release
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Generate Release Body
        id: release_body
        run: |
          CURRENT_TAG=${{ needs.get-latest-tag.outputs.tag }}
          PREVIOUS_TAG=${{ needs.get-latest-tag.outputs.previous_tag }}
          echo "# What's Changed" > release_body.md
          echo "" >> release_body.md
          if [ -n "$PREVIOUS_TAG" ]; then
            echo "Full Changelog: [$PREVIOUS_TAG...$CURRENT_TAG](https://github.com/${{ github.repository }}/compare/$PREVIOUS_TAG...$CURRENT_TAG)" >> release_body.md
          else
            echo "First Release" >> release_body.md
          fi
          echo "" >> release_body.md
          echo "## Changelog" >> release_body.md
          git log --pretty=format:"* %s" $PREVIOUS_TAG..$CURRENT_TAG >> release_body.md

      - name: Release
        uses: ncipollo/release-action@v1
        with:
          tag: ${{ needs.get-latest-tag.outputs.tag }}
          artifacts: "assets/*/*/*"
          allowUpdates: true
          makeLatest: true
          replacesArtifacts: true
          generateReleaseNotes: true
          bodyFile: release_body.md
